# General #####################################################################

stages:
  - quality
  - build
  - deploy
  - cleanup

.variables: &backend_variables
  SECRET_KEY: test
  DEBUG: "false"
  ALLOWED_HOSTS: localhost
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: web_template
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  ADMIN_URL: admin/
  STATIC_URL: /backend/static/
  GOOGLE_CREDENTIALS: '{"type": "service_account", "private_key_id": "abc", "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDY3E8o1NEFcjMM\nHW/5ZfFJw29/8NEqpViNjQIx95Xx5KDtJ+nWn9+OW0uqsSqKlKGhAdAo+Q6bjx2c\nuXVsXTu7XrZUY5Kltvj94DvUa1wjNXs606r/RxWTJ58bfdC+gLLxBfGnB6CwK0YQ\nxnfpjNbkUfVVzO0MQD7UP0Hl5ZcY0Puvxd/yHuONQn/rIAieTHH1pqgW+zrH/y3c\n59IGThC9PPtugI9ea8RSnVj3PWz1bX2UkCDpy9IRh9LzJLaYYX9RUd7++dULUlat\nAaXBh1U6emUDzhrIsgApjDVtimOPbmQWmX1S60mqQikRpVYZ8u+NDD+LNw+/Eovn\nxCj2Y3z1AgMBAAECggEAWDBzoqO1IvVXjBA2lqId10T6hXmN3j1ifyH+aAqK+FVl\nGjyWjDj0xWQcJ9ync7bQ6fSeTeNGzP0M6kzDU1+w6FgyZqwdmXWI2VmEizRjwk+/\n/uLQUcL7I55Dxn7KUoZs/rZPmQDxmGLoue60Gg6z3yLzVcKiDc7cnhzhdBgDc8vd\nQorNAlqGPRnm3EqKQ6VQp6fyQmCAxrr45kspRXNLddat3AMsuqImDkqGKBmF3Q1y\nxWGe81LphUiRqvqbyUlh6cdSZ8pLBpc9m0c3qWPKs9paqBIvgUPlvOZMqec6x4S6\nChbdkkTRLnbsRr0Yg/nDeEPlkhRBhasXpxpMUBgPywKBgQDs2axNkFjbU94uXvd5\nznUhDVxPFBuxyUHtsJNqW4p/ujLNimGet5E/YthCnQeC2P3Ym7c3fiz68amM6hiA\nOnW7HYPZ+jKFnefpAtjyOOs46AkftEg07T9XjwWNPt8+8l0DYawPoJgbM5iE0L2O\nx8TU1Vs4mXc+ql9F90GzI0x3VwKBgQDqZOOqWw3hTnNT07Ixqnmd3dugV9S7eW6o\nU9OoUgJB4rYTpG+yFqNqbRT8bkx37iKBMEReppqonOqGm4wtuRR6LSLlgcIU9Iwx\nyfH12UWqVmFSHsgZFqM/cK3wGev38h1WBIOx3/djKn7BdlKVh8kWyx6uC8bmV+E6\nOoK0vJD6kwKBgHAySOnROBZlqzkiKW8c+uU2VATtzJSydrWm0J4wUPJifNBa/hVW\ndcqmAzXC9xznt5AVa3wxHBOfyKaE+ig8CSsjNyNZ3vbmr0X04FoV1m91k2TeXNod\njMTobkPThaNm4eLJMN2SQJuaHGTGERWC0l3T18t+/zrDMDCPiSLX1NAvAoGBAN1T\nVLJYdjvIMxf1bm59VYcepbK7HLHFkRq6xMJMZbtG0ryraZjUzYvB4q4VjHk2UDiC\nlhx13tXWDZH7MJtABzjyg+AI7XWSEQs2cBXACos0M4Myc6lU+eL+iA+OuoUOhmrh\nqmT8YYGu76/IBWUSqWuvcpHPpwl7871i4Ga/I3qnAoGBANNkKAcMoeAbJQK7a/Rn\nwPEJB+dPgNDIaboAsh1nZhVhN5cvdvCWuEYgOGCPQLYQF0zmTLcM+sVxOYgfy8mV\nfbNgPgsP5xmu6dw2COBKdtozw0HrWSRjACd1N4yGu75+wPCcX/gQarcjRcXXZeEa\nNtBLSfcqPULqD+h7br9lEJio\n-----END PRIVATE KEY-----\n", "client_email": "123-abc@developer.gserviceaccount.com", "client_id": "123-abc.apps.googleusercontent.com", "auth_uri": "https://accounts.google.com/o/oauth2/auth", "token_uri": "http://localhost:8080/token"}'

# see https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
.terraform:
  image: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/1.4"
  variables:
    TF_ROOT: terraform
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/

# Docs ########################################################################

markdownlint:
  stage: quality
  image: node:latest
  cache:
    paths:
      - node_modules
  before_script:
    - npm install markdownlint-cli
  script:
    - npx markdownlint README.md docs

# flake8, black, isort, pytest, mypy, terraform validate ######################

.python:
  stage: quality
  image: python:3.9
  cache:
    key:
      files:
        - backend/requirements/quality.txt
    paths:
      - .cache/pip
      - venv/
  variables:
    <<: *backend_variables
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r backend/requirements/quality.txt

flake8:
  extends: .python
  script:
    - flake8 backend --max-line-length=120 --exclude=*/migrations/*

black:
  extends: .python
  script:
    - black backend --diff --check

isort:
  extends: .python
  script:
    - isort backend --check-only --diff

pytest:
  extends: .python
  script:
    - pytest backend

mypy:
  extends: .python
  script:
    - cd backend
    - mypy .

terraform validate:
  extends: .terraform
  stage: quality
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform fmt
  allow_failure: true

# Frontend ####################################################################

.frontend:
  stage: quality
  image: node:18-alpine
  cache:
    key:
      files:
        - frontend/yarn.lock
    paths:
      - frontend/node_modules
  before_script:
    - cd frontend
    - yarn

eslint:
  extends: .frontend
  script:
    - yarn lint

prettier:
  extends: .frontend
  script:
    - yarn format-check

# Build #######################################################################

.builder:
  stage: build
  image: docker/compose:1.29.2
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  variables:
    # Docker engine
    DOCKER_BUILDKIT: 1
    COMPOSE_DOCKER_CLI_BUILD: 1
    # docker-compose
    SITE_ADDRESS: localhost:80
    DOCKER_BUILD_ENVIRONMENT: production
    DOCKER_BUILD_IMAGE_PREFIX: $CI_REGISTRY_IMAGE
    <<: *backend_variables
  only:
    - master

build:
  extends: .builder
  script:
    - docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1
    - docker-compose push

kustomization:
  stage: build
  image: cmd.cat/envsubst
  script:
    - envsubst < kustomization_blank.yml > kustomization.yml
  artifacts:
    paths:
      - kustomization.yml

terraform plan:
  extends: .terraform
  stage: build
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Deploy ######################################################################

.deploy:
  stage: deploy
  only:
    - master

terraform apply:
  extends: .terraform
  stage: deploy
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  when: manual

deploy:
  extends: .deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config get-contexts
    - kubectl config use-context 0x29a/cide:k3s-agent
    - kubectl get pods
    - cat kustomization.yml
    - kubectl apply -k .

# Cleanup #####################################################################

terraform destroy:
  extends: .terraform
  stage: cleanup
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual
