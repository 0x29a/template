# General #####################################################################

stages:
  - quality
  - build
  - deploy
  - cleanup

.variables: &backend_variables
  SECRET_KEY: test
  DEBUG: "false"
  ALLOWED_HOSTS: localhost
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: web_template
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  ADMIN_URL: admin/
  STATIC_URL: /backend/static/

# see https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.gitlab-ci.yml
.terraform:
  image: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/1.4"
  variables:
    TF_ROOT: terraform
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/

# Docs ########################################################################

markdownlint:
  stage: quality
  image: node:latest
  cache:
    paths:
      - node_modules
  before_script:
    - npm install markdownlint-cli
  script:
    - npx markdownlint README.md docs

# flake8, black, isort, pytest, mypy, terraform validate ######################

.python:
  stage: quality
  image: python:3.9
  cache:
    key:
      files:
        - backend/requirements/quality.txt
    paths:
      - .cache/pip
      - venv/
  variables:
    <<: *backend_variables
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r backend/requirements/quality.txt

flake8:
  extends: .python
  script:
    - flake8 backend --max-line-length=120 --exclude=*/migrations/*

black:
  extends: .python
  script:
    - black backend --diff --check

isort:
  extends: .python
  script:
    - isort backend --check-only --diff

pytest:
  extends: .python
  script:
    - pytest backend

mypy:
  extends: .python
  script:
    - cd backend
    - mypy .

terraform validate:
  extends: .terraform
  stage: quality
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform fmt
  allow_failure: true

# Frontend ####################################################################

.frontend:
  stage: quality
  image: node:18-alpine
  cache:
    key:
      files:
        - frontend/yarn.lock
    paths:
      - frontend/node_modules
  before_script:
    - cd frontend
    - yarn

eslint:
  extends: .frontend
  script:
    - yarn lint

prettier:
  extends: .frontend
  script:
    - yarn format-check

# Build #######################################################################

.builder:
  stage: build
  image: docker/compose:1.29.2
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  variables:
    # Docker engine
    DOCKER_BUILDKIT: 1
    COMPOSE_DOCKER_CLI_BUILD: 1
    # docker-compose
    SITE_ADDRESS: localhost:80
    DOCKER_BUILD_ENVIRONMENT: production
    DOCKER_BUILD_IMAGE_PREFIX: $CI_REGISTRY_IMAGE
    <<: *backend_variables
  only:
    - master

build:
  extends: .builder
  script:
    - docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1
    - docker-compose push

kustomization:
  stage: build
  image: cmd.cat/envsubst
  script:
    - envsubst < kustomization_blank.yml > kustomization.yml
  artifacts:
    paths:
      - kustomization.yml

terraform plan:
  extends: .terraform
  stage: build
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Deploy ######################################################################

.deploy:
  stage: deploy
  only:
    - master

terraform apply:
  extends: .terraform
  stage: deploy
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  when: manual

deploy:
  extends: .deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config get-contexts
    - kubectl config use-context 0x29a/cide:k3s-agent
    - kubectl get pods
    - cat kustomization.yml
    - kubectl apply -k .

# Cleanup #####################################################################

terraform destroy:
  extends: .terraform
  stage: cleanup
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual
