# General #####################################################################

stages:
  - quality
  - build
  - deploy

# Docs ########################################################################

markdownlint:
  stage: quality
  image: node:latest
  cache:
    paths:
      - node_modules
  before_script:
    - npm install markdownlint-cli
  script:
    - npx markdownlint README.md docs

# flake8, black, isort, pytest, mypy ##########################################

.python:
  stage: quality
  image: python:3.9
  cache:
    key:
      files:
        - requirements/quality.txt
    paths:
      - .cache/pip
      - venv/
  variables:
    PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements/quality.txt

flake8:
  extends: .python
  script:
    - flake8 backend --max-line-length=120

black:
  extends: .python
  script:
    - black backend --diff --check

isort:
  extends: .python
  script:
    - isort backend --check-only --diff

pytest:
  extends: .python
  script:
    - pytest backend

mypy:
  extends: .python
  script:
    - mypy --config-file backend/mypy.ini backend

# Frontend ####################################################################

.frontend:
  stage: quality
  image: node:18-alpine
  cache:
    key:
      files:
        - frontend/yarn.lock
    paths:
      - frontend/node_modules
  before_script:
    - cd frontend
    - yarn

eslint:
  extends: .frontend
  script:
    - yarn lint

prettier:
  extends: .frontend
  script:
    - yarn format-check

# Build #######################################################################

.builder:
  stage: build
  image: docker/compose:1.29.2
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - apk update && apk add make
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  variables:
    # Docker
    DOCKER_BUILDKIT: 1
    COMPOSE_DOCKER_CLI_BUILD: 1
    # Application
    ALLOWED_HOSTS: localhost
    ADMIN_URL: admin/
    STATIC_URL: /backend/static/
    POSTGRES_HOST: postgres
    POSTGRES_PORT: 5432
    POSTGRES_DB: web_template
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    DEBUG: "false"
    SECRET_KEY: test
    SITE_ADDRESS: localhost:80
    DOCKER_BUILD_ENVIRONMENT: production
    DOCKER_BUILD_IMAGE_PREFIX: $CI_REGISTRY_IMAGE
  only:
    - master


build:
  extends: .builder
  script:
    - docker-compose build --build-arg BUILDKIT_INLINE_CACHE=1
    - docker-compose push

# Deploy ######################################################################

.deploy:
  stage: deploy
  only:
    - master

deploy:
  extends: .deploy
  image: alpine:latest
  before_script:
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$DEPLOYMENT_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh -p $DEPLOYMENT_PORT $DEPLOYMENT_USER@$DEPLOYMENT_HOST "/bin/bash $DEPLOYMENT_WORKDIR/deploy.sh"
