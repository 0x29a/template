---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app.kubernetes.io/name: frontend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: frontend
          image: frontend
          imagePullPolicy: Always
          command: ["/start"]
          envFrom:
            - configMapRef:
                name: frontend-config
            - secretRef:
                name: frontend-secrets
          ports:
            - containerPort: 3000
          securityContext:
            allowPrivilegeEscalation: false
      imagePullSecrets:
        - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  labels:
    app.kubernetes.io/name: backend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backend
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: backend
          image: backend
          imagePullPolicy: Always
          args: ["/start_django"]
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: backend-secrets
          ports:
            - containerPort: 5000
          securityContext:
            allowPrivilegeEscalation: false
      imagePullSecrets:
        - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  labels:
    app.kubernetes.io/name: celery-worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: celery-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: celery-worker
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: celery-worker
          image: backend
          imagePullPolicy: Always
          args: ["/start_celeryworker"]
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: backend-secrets
          securityContext:
            allowPrivilegeEscalation: false
      imagePullSecrets:
        - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  labels:
    app.kubernetes.io/name: celery-beat
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: celery-beat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: celery-beat
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: celery-beat
          image: backend
          imagePullPolicy: Always
          args: ["/start_celerybeat"]
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: backend-secrets
          securityContext:
            allowPrivilegeEscalation: false
      imagePullSecrets:
        - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flower
  labels:
    app.kubernetes.io/name: flower
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: flower
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flower
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: flower
          image: backend
          imagePullPolicy: Always
          args: ["/start_flower"]
          envFrom:
            - configMapRef:
                name: backend-config
            - secretRef:
                name: backend-secrets
          securityContext:
            allowPrivilegeEscalation: false
      imagePullSecrets:
        - name: regcred
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app.kubernetes.io/name: postgres
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: postgres
          image: docker.io/postgres:12.2
          env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          envFrom:
            - secretRef:
                name: postgres-secrets
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app.kubernetes.io/name: redis
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: redis
          image: docker.io/redis:5.0
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /data
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: redis
